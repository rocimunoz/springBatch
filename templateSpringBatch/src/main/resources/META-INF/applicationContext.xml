<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:flow="http://www.springframework.org/schema/webflow-config"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:jms="http://www.springframework.org/schema/jms"
       xmlns:lang="http://www.springframework.org/schema/lang"
       xmlns:osgi="http://www.springframework.org/schema/osgi"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:batch="http://www.springframework.org/schema/batch"

       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
          http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
          http://www.springframework.org/schema/webflow-config http://www.springframework.org/schema/webflow-config/spring-webflow-config-2.1.xsd
          http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
          http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-3.2.xsd
          http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-3.2.xsd
          http://www.springframework.org/schema/osgi http://www.springframework.org/schema/osgi/spring-osgi-1.2.xsd
          http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
          http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
          http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-3.0.xsd">

    
    <context:component-scan base-package="org.template"/>
  
    <bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
        <property name="jobRepository" ref="jobRepository" />
    </bean>
       
  
    <!-- **********************LOGICA DEL JOB (STEPS, CHUNKS Y DECISORS) ******************************-->
  
   
    <batch:job id="templateSpring" job-repository="jobRepository">    
        
        <!-- Si el step1 va bien, avanza al step2 y si no hace 3 reintentos -->
        <batch:step id="extraccionDatosINE" >
            <batch:tasklet ref="TaskExtraccionDatosINE" transaction-manager="transactionManager"/>
            <batch:next on="*" to="chunkDatosINE" />
            <batch:next on="FAILED" to="decider" />
        </batch:step>
        
        <!-- Reintentos del step1, al tercero se va a Fin -->
        <batch:decision decider="DeciderReintentos" id="decider">
            <batch:next on="DECISOR_REINTENTOS" to="step1" />
            <batch:next on="DECISOR_FIN" to="fin" />
        </batch:decision>
        
     
         
         
        <!-- Un chunk se compone de Reader, [Processor], Writer
        Gestiona el numero de elementos para cerrar la transaccion--> 
       
        <!--
         <batch:step id="chunk1" next="step6" >        
             <batch:tasklet transaction-manager="transactionManager" task-executor="taskExecutor">
                 <batch:chunk    reader="itemReaderChunk1"
                                processor="itemProcessChunk1"
                                 writer="itemWriterChunk1"
                                 commit-interval="1"
                 />
             </batch:tasklet>
         </batch:step> 
        --> 
      
        <batch:step id="chunkDatosINE" next="fin" >        
            <batch:tasklet transaction-manager="transactionManager" task-executor="taskExecutor">
                <batch:chunk    reader="itemReaderDatosINE"
                                writer="itemWriterDatosINE"
                                commit-interval="${commitInterval}"
                />
            </batch:tasklet>
        </batch:step>
        
        <batch:step id="fin">
            <batch:tasklet ref="finTasklet"/>
        </batch:step>        
       
    </batch:job>
     
    <!-- **************************************************************************************-->      
   
   
   
    <!-- ******************GESTION DE HILOS **************************************************-->
    <bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="1" />
        <property name="maxPoolSize"  value="10" />
    </bean>
    <!-- **************************************************************************************-->
   
   
   
    <!-- ***************** DEFINICION DE BEANS ***************************-->   
             
    <bean id="itemReaderDatosINE"
          class="org.springframework.batch.item.file.FlatFileItemReader">
             
        <property name="resource">
            <value>file:./ficheros/*.json</value>
        </property>
        <property name="recordSeparatorPolicy"
                  ref="productRecordSeparatorPolicy"/>
        <property name="lineMapper" ref="productLineMapper"/>
    </bean>

    <bean id="productRecordSeparatorPolicy" class="org.springframework.batch.item.file.separator.JsonRecordSeparatorPolicy"/>

    <bean id="productLineMapper"
          class="com.manning.sbia.ch06.WrappedJsonLineMapper">
        <property name="delegate" ref="targetProductsLineMapper"/>
    </bean>

    <bean id="targetProductsLineMapper"
          class="org.springframework.batch.item.file.mapping.JsonLineMapper"/>

   <!--<bean id="productItemWriter" class="com.manning.sbia.ch06.DummyProductItemWriter"/>-->

   
   
   
    
    <bean id="DeciderReintentos" class="org.template.negocio.DeciderReintentos"></bean>              
            
    <bean id="finTasklet" class="org.template.negocio.TaskFin">
    </bean>    

    

   

</beans>